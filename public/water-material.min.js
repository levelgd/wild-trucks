THREE.ShaderLib.water={uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,{normalSampler:{type:"t",value:null},mirrorSampler:{type:"t",value:null},alpha:{type:"f",value:1},time:{type:"f",value:0},distortionScale:{type:"f",value:20},noiseScale:{type:"f",value:1},textureMatrix:{type:"m4",value:new THREE.Matrix4},sunColor:{type:"c",value:new THREE.Color(8355711)},sunDirection:{type:"v3",value:new THREE.Vector3(.70707,.70707,0)},eye:{type:"v3",value:new THREE.Vector3(0,0,0)},waterColor:{type:"c",value:new THREE.Color(5592405)}}]),vertexShader:["uniform mat4 textureMatrix;","uniform float time;","varying vec4 mirrorCoord;","varying vec3 worldPosition;","varying vec3 modelPosition;","varying vec3 surfaceX;","varying vec3 surfaceY;","varying vec3 surfaceZ;","void main()","{","  mirrorCoord = modelMatrix * vec4(position, 1.0);","  worldPosition = mirrorCoord.xyz;","  modelPosition = position;","  surfaceX = vec3( modelMatrix[0][0], modelMatrix[0][1], modelMatrix[0][2]);","  surfaceY = vec3( modelMatrix[1][0], modelMatrix[1][1], modelMatrix[1][2]);","  surfaceZ = vec3( modelMatrix[2][0], modelMatrix[2][1], modelMatrix[2][2]);","  mirrorCoord = textureMatrix * mirrorCoord;","  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);","}"].join("\n"),fragmentShader:["uniform sampler2D mirrorSampler;","uniform float alpha;","uniform float time;","uniform float distortionScale;","uniform float noiseScale;","uniform sampler2D normalSampler;","uniform vec3 sunColor;","uniform vec3 sunDirection;","uniform vec3 eye;","uniform vec3 waterColor;","varying vec4 mirrorCoord;","varying vec3 worldPosition;","varying vec3 modelPosition;","varying vec3 surfaceX;","varying vec3 surfaceY;","varying vec3 surfaceZ;","void sunLight(const vec3 surfaceNormal, const vec3 eyeDirection, in float shiny, in float spec, in float diffuse, inout vec3 diffuseColor, inout vec3 specularColor)","{","  vec3 reflection = normalize(reflect(-sunDirection, surfaceNormal));","  float direction = max(0.0, dot(eyeDirection, reflection));","  specularColor += pow(direction, shiny) * sunColor * spec;","  diffuseColor += max(dot(sunDirection, surfaceNormal), 0.0) * sunColor * diffuse;","}","vec3 getNoise(in vec2 uv)","{","  vec2 uv0 = uv / (103.0 * noiseScale) + vec2(time / 17.0, time / 29.0);","  vec2 uv1 = uv / (107.0 * noiseScale) - vec2(time / -19.0, time / 31.0);","  vec2 uv2 = uv / (vec2(8907.0, 9803.0) * noiseScale) + vec2(time / 101.0, time /   97.0);","  vec2 uv3 = uv / (vec2(1091.0, 1027.0) * noiseScale) - vec2(time / 109.0, time / -113.0);","  vec4 noise = texture2D(normalSampler, uv0) +","    texture2D(normalSampler, uv1) +","    texture2D(normalSampler, uv2) +","    texture2D(normalSampler, uv3);","  return noise.xyz * 0.5 - 1.0;","}",THREE.ShaderChunk.common,THREE.ShaderChunk.fog_pars_fragment,"void main()","{","  vec3 worldToEye = eye - worldPosition;","  vec3 eyeDirection = normalize(worldToEye);","  vec3 noise = getNoise(modelPosition.xy * 1.0);","  vec3 distordCoord = noise.x * surfaceX + noise.y * surfaceY;","  vec3 distordNormal = distordCoord + surfaceZ;","  if(dot(eyeDirection, surfaceZ) < 0.0)","    distordNormal = distordNormal * -1.0;","  vec3 diffuseLight = vec3(0.0);","  vec3 specularLight = vec3(0.0);","  sunLight(distordNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight);","  float distance = length(worldToEye);","  vec2 distortion = distordCoord.xy * distortionScale * sqrt(distance) * 0.07;"," vec3 mirrorDistord = mirrorCoord.xyz + vec3(distortion.x, distortion.y, 1.0);"," vec3 reflectionSample = texture2DProj(mirrorSampler, mirrorDistord).xyz;","  float theta = max(dot(eyeDirection, distordNormal), 0.0);","  float reflectance = 0.3 + (1.0 - 0.3) * pow((1.0 - theta), 3.0);","  vec3 scatter = max(0.0, dot(distordNormal, eyeDirection)) * waterColor;","  vec3 albedo = mix(sunColor * diffuseLight * 0.3 + scatter, (vec3(0.1) + reflectionSample * 0.9 + reflectionSample * specularLight), reflectance);"," vec3 outgoingLight = albedo;",THREE.ShaderChunk.fog_fragment," gl_FragColor = vec4( outgoingLight, alpha );","}"].join("\n")},THREE.Water=function(e,r,t,i){function o(e,r){return void 0!==e?e:r}THREE.Object3D.call(this),this.name="water_"+this.id,i=i||{},this.matrixNeedsUpdate=!0;var a=o(i.textureWidth,512),s=o(i.textureHeight,512);this.clipBias=o(i.clipBias,-1e-4),this.alpha=o(i.alpha,1),this.time=o(i.time,0),this.normalSampler=o(i.waterNormals,null),this.sunDirection=o(i.sunDirection,new THREE.Vector3(.70707,.70707,0)),this.sunColor=new THREE.Color(o(i.sunColor,16777215)),this.waterColor=new THREE.Color(o(i.waterColor,8355711)),this.eye=o(i.eye,new THREE.Vector3(0,0,0)),this.distortionScale=o(i.distortionScale,20),this.noiseScale=o(i.noiseScale,1),this.side=o(i.side,THREE.FrontSide),this.fog=o(i.fog,!1),this.renderer=e,this.scene=t,this.mirrorPlane=new THREE.Plane,this.normal=new THREE.Vector3(0,0,1),this.cameraWorldPosition=new THREE.Vector3,this.rotationMatrix=new THREE.Matrix4,this.lookAtPosition=new THREE.Vector3(0,0,(-1)),this.clipPlane=new THREE.Vector4,r instanceof THREE.PerspectiveCamera?this.camera=r:(this.camera=new THREE.PerspectiveCamera,console.log(this.name+": camera is not a Perspective Camera!")),this.textureMatrix=new THREE.Matrix4,this.mirrorCamera=this.camera.clone(),this.texture=new THREE.TextureLoader("res/sea.png");var n=THREE.ShaderLib.water,l=THREE.UniformsUtils.clone(n.uniforms);this.material=new THREE.ShaderMaterial({fragmentShader:n.fragmentShader,vertexShader:n.vertexShader,uniforms:l,transparent:!0,side:this.side,fog:this.fog}),this.mesh=new THREE.Object3D,this.material.uniforms.mirrorSampler.value=this.texture,this.material.uniforms.textureMatrix.value=this.textureMatrix,this.material.uniforms.alpha.value=this.alpha,this.material.uniforms.time.value=this.time,this.material.uniforms.normalSampler.value=this.normalSampler,this.material.uniforms.sunColor.value=this.sunColor,this.material.uniforms.waterColor.value=this.waterColor,this.material.uniforms.sunDirection.value=this.sunDirection,this.material.uniforms.distortionScale.value=this.distortionScale,this.material.uniforms.noiseScale.value=this.noiseScale,this.material.uniforms.eye.value=this.eye,THREE.Math.isPowerOfTwo(a)&&THREE.Math.isPowerOfTwo(s)||(this.texture.generateMipmaps=!1)},THREE.Water.prototype=Object.create(THREE.Object3D.prototype),THREE.Water.prototype.renderWithMirror=function(e){},THREE.Water.prototype.updateTextureMatrix=function(){function e(e){return e?e<0?-1:1:0}void 0!==this.parent&&(this.mesh=this.parent),this.updateMatrixWorld(),this.camera.updateMatrixWorld(),this.cameraWorldPosition.setFromMatrixPosition(this.camera.matrixWorld),this.rotationMatrix.extractRotation(this.matrixWorld),this.normal=new THREE.Vector3(0,0,1).applyEuler(this.mesh.rotation);var r=this.camera.position.clone().sub(this.mesh.position);if(this.normal.dot(r)<0){var t=new THREE.Vector3(0,0,1).applyEuler(this.mesh.rotation);this.normal.reflect(t)}var i=this.mesh.position.clone().sub(this.cameraWorldPosition);i.reflect(this.normal).negate(),i.add(this.mesh.position),this.rotationMatrix.extractRotation(this.camera.matrixWorld),this.lookAtPosition.set(0,0,-1),this.lookAtPosition.applyMatrix4(this.rotationMatrix),this.lookAtPosition.add(this.cameraWorldPosition);var o=this.mesh.position.clone().sub(this.lookAtPosition);o.reflect(this.normal).negate(),o.add(this.mesh.position),this.up.set(0,-1,0),this.up.applyMatrix4(this.rotationMatrix),this.up.reflect(this.normal).negate(),this.mirrorCamera.position.copy(i),this.mirrorCamera.up=this.up,this.mirrorCamera.lookAt(o),this.mirrorCamera.aspect=this.camera.aspect,this.mirrorCamera.updateProjectionMatrix(),this.mirrorCamera.updateMatrixWorld(),this.mirrorCamera.matrixWorldInverse.getInverse(this.mirrorCamera.matrixWorld),this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),this.textureMatrix.multiply(this.mirrorCamera.projectionMatrix),this.textureMatrix.multiply(this.mirrorCamera.matrixWorldInverse),this.mirrorPlane.setFromNormalAndCoplanarPoint(this.normal,this.mesh.position),this.mirrorPlane.applyMatrix4(this.mirrorCamera.matrixWorldInverse),this.clipPlane.set(this.mirrorPlane.normal.x,this.mirrorPlane.normal.y,this.mirrorPlane.normal.z,this.mirrorPlane.constant);var a=new THREE.Vector4,s=this.mirrorCamera.projectionMatrix;a.x=(e(this.clipPlane.x)+s.elements[8])/s.elements[0],a.y=(e(this.clipPlane.y)+s.elements[9])/s.elements[5],a.z=-1,a.w=(1+s.elements[10])/s.elements[14];var n=new THREE.Vector4;n=this.clipPlane.multiplyScalar(2/this.clipPlane.dot(a)),s.elements[2]=n.x,s.elements[6]=n.y,s.elements[10]=n.z+1-this.clipBias,s.elements[14]=n.w;var l=new THREE.Vector3;l.setFromMatrixPosition(this.camera.matrixWorld),this.eye=l,this.material.uniforms.eye.value=this.eye},THREE.Water.prototype.render=function(e){this.matrixNeedsUpdate&&this.updateTextureMatrix(),this.matrixNeedsUpdate=!0,void 0!==this.scene&&this.scene instanceof THREE.Scene&&(this.material.uniforms.mirrorSampler.value=this.texture)};